'''---知识点：函数---'''

'''
    1.函数也是一个对象
    2.对象是内存中专门用来存储数据的一块区域
    3.保存一些可执行代码，可以多次调用
    4.def 函数名([形参1,形参2,形参3...]):
        #代码块
    5.形参（形式参数）是用来接收调用该函数时传递的参数，多个形参使用逗号隔开
      定义形参就相当于在函数内部定义了变量，但是没有赋值
    6.实参（实际参数）：在调用有参函数时，函数名后面括号中的参数称为“实际参数”
      函数定义时指定了形参，调用时也必须传递相对应个实参
    7.func是函数对象，func()是调用函数
    8.定义形参时，可以为形参指定一个默认值,若传递了参数，默认值则不会有任何作用
    9.位置传参：实参和形参位置相对应
    10.关键字传参：可以不按定义的顺序传参，根据参数名来传参
    11.位置传参可以与关键字传参混合使用，但位置传参必须在关键字传参前面
    12.函数在调用时不检查实参的类型，故实参的类型可以是任意的对象
    13.在函数中对形参重新赋值不会影响其他变量
    14.当我们通过形参去修改对象时，会影响到指向该对象的变量
      补充：1.可变对象作为参数传入时，在函数中对其本身进行修改，
            是会影响到全局中的这个变量值的，因为函数直接对该地址的值进行了修改。
            2.对于不可变对象来说，虽然函数中的a值变了，但是全局中的a值没变，
            因为函数中的a值已经对应了另外一个地址，而全局中的a值指向的原来地址的值是没有变的。
            3.可变对象：list dict set
              不可变对象：tuple string int float bool

    15.定义函数的时候，在形参的前面加上一个*，这个形参会获取到所有的实参，将所有的实参保存到一个元组中
    16.将零散的参数统一放在一起成为装包
    17.不定长参数不是必须要写到最后的，但注意带*的参数后面的参数必须是关键字传参，否则报错
'''
def func():
    print('这是我的一个函数')

func() #调用函数
#打印func
print(func)  #打印函数 结果为：<function func at 0x000002AA22DE6F78> 是一个函数对象，其对应的内存地址为0x

def s(a,b): #传入形参
    num=a+b
    print(num)
s(2,3)  #5  #传入实参

#传入三个形参，为形参c赋一个初值10
def fn(a,b,c=10):
    print('a=',a)
    print('b=',b)
    print('c=',c)
fn(1,2)  #位置传参
fn(b=3,c=8,a=6)  #关键字传参

#两种传参混合使用
with open('123.txt','w',encoding='utf-8') as f: #关键字传参必须在后面
    pass

def fn1(a):
    print(a)
fn1(fn)  #可以传入一个函数对象，注意是函数对象，不是调用函数，故不用加（）


#在函数中对形参重新赋值不会影响其他变量,当我们通过形参去修改对象时，会影响到指向该对象的变量
def fn2(a):
    a[0]=5
    print(a)
c=[1,2,3]
fn2(c)   #[5, 2, 3]   #会改变指向对象的变量c
print(c)  #[5, 2, 3]

fn2(c.copy())  #不会改变指向对象的变量c
fn2(c[:])    #不会改变指向对象的变量c

#七、不定长参数
#定义一个函数来实现任意数的和
#定义函数的时候，在形参的前面加上一个*，这个形参会获取到所有的实参，将所有的实参保存到一个元组中
#将零散的参数统一放在一起成为装包
#*形参可以写在任意位置，但其后面的参数，必须是关键字传参
def fn3(*a):
    r=0
    for n in a:   #遍历元组，实现任意数的相加
        r+=n
    print('r=',r,type(a))

fn3(2,3,4)  #a= (2, 3, 4) <class Tuple>

##不定长参数与其他参数混合使用
def fn4(a,b,*c):
    print('a=',a)   #a=1
    print('b=', b)  #b= 2
    print('c=', c)  #c= (3, 4, 5, 6)

fn4(1,2,3,4,5,6)

##单*不定长参数，不能传入关键字参数 如：
##因此*处理的是不定长位置参数
def z(*a):
    print(a)
#z(a=1)   #是会报错的，因为根本找不到关键字参数a

## **不定长参数，则可以对其进行关键字传参,但是以字典形式传入，如：
## **但也不可以传入位置参数
##因此**处理的是不定长关键字参数
## **形参只能有一个，并且必须写在最后面
def z1(**a):
    print(a)
z1(a=1,b=2)  #{'a':1,'b':2}

##不定长参数不是必须要写到最后的，但注意带*的参数后面的参数必须是关键字传参，否则报错
## *处理的是位置参数
def fn5(a,*b,c=6):
    print('a=',a)
    print('b=', b)  #b= 2
    print('c=', c)  #c= (3, 4, 5, 6)

fn5(1,2,3,4,5,6)

fn5(1,2,3,4,5,c=7)

#若在开头直接写一个*，则要求我们对所有的参数进行关键字传参，
def s(*,a,b,c):
    print('a=', a)
    print('b=', b)
    print('c=', c)
s(a=3,b=4,c=5)

# **形参（也是不定长形参）可以接收其他关键字参数，他会将这些参数统一保存到一个字典中
# **形参处理的是关键字参数
#字典中的key是参数的名字，字典中的value是参数的值
# **形参只能有一个，并且必须写在最后面
def fn(**a):
    print('a=',a,type(a))
fn(a=1,b=2,c=3,d=4,e=5) #a= {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} <class 'dict'>

#八 参数解包

def s1(a,b,c):
    print('a=', a)
    print('b=', b)
    print('c=', c)

#要求序列中的元素必须和形参的个数一致
t=(5,6,7)
#t={'a':1,'b':2,'c':3}  #字典解包得到的是键元素
s1(*t)  #a=5 b=6 c=7
d={'a':1,'b':2,'c':3}
s1(**d)  #双*解包字典得到的是值、a=1 b=2 c=3

def z2(*a):
    print(a)
z2(1,2,3)